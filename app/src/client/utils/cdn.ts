// CDN Configuration and Utilities
// This utility manages static asset delivery through CDN

interface CDNConfig {
  baseUrl: string;
  imageOptimization: {
    enabled: boolean;
    quality: number;
    formats: string[];
    widths: number[];
  };
  cacheControl: {
    images: string;
    fonts: string;
    scripts: string;
    styles: string;
  };
}

// CDN Configuration
const cdnConfig: CDNConfig = {
  baseUrl: process.env.NODE_ENV === 'production' 
    ? process.env.VITE_CDN_URL || 'https://your-cdn.com' // Replace with your CDN URL
    : '',
  imageOptimization: {
    enabled: true,
    quality: 80,
    formats: ['webp', 'avif'],
    widths: [320, 640, 768, 1024, 1280, 1920]
  },
  cacheControl: {
    images: 'public, max-age=31536000, immutable', // 1 year
    fonts: 'public, max-age=31536000, immutable', // 1 year
    scripts: 'public, max-age=31536000, immutable', // 1 year
    styles: 'public, max-age=31536000, immutable' // 1 year
  }
};

/**
 * Generate CDN URL for static assets
 */
export const getCDNUrl = (path: string, type: 'image' | 'font' | 'script' | 'style' = 'image'): string => {
  if (!cdnConfig.baseUrl || path.startsWith('http')) {
    return path;
  }

  // Remove leading slash if present
  const cleanPath = path.startsWith('/') ? path.slice(1) : path;
  
  return `${cdnConfig.baseUrl}/${cleanPath}`;
};

/**
 * Generate optimized image URL with parameters
 */
export const getOptimizedImageUrl = (
  imagePath: string,
  options: {
    width?: number;
    height?: number;
    quality?: number;
    format?: 'webp' | 'avif' | 'auto';
    fit?: 'cover' | 'contain' | 'fill';
  } = {}
): string => {
  if (!cdnConfig.baseUrl || imagePath.startsWith('http')) {
    return imagePath;
  }

  const {
    width,
    height,
    quality = cdnConfig.imageOptimization.quality,
    format = 'webp',
    fit = 'cover'
  } = options;

  const cleanPath = imagePath.startsWith('/') ? imagePath.slice(1) : imagePath;
  const params = new URLSearchParams();

  if (width) params.append('w', width.toString());
  if (height) params.append('h', height.toString());
  params.append('q', quality.toString());
  params.append('f', format);
  params.append('fit', fit);

  return `${cdnConfig.baseUrl}/${cleanPath}?${params.toString()}`;
};

/**
 * Generate responsive image srcset
 */
export const generateSrcSet = (
  imagePath: string,
  widths: number[] = cdnConfig.imageOptimization.widths,
  options: {
    quality?: number;
    format?: 'webp' | 'avif' | 'auto';
    fit?: 'cover' | 'contain' | 'fill';
  } = {}
): string => {
  return widths
    .map(width => `${getOptimizedImageUrl(imagePath, { ...options, width })} ${width}w`)
    .join(', ');
};

/**
 * Preload critical assets
 */
export const preloadAsset = (url: string, type: 'image' | 'font' | 'script' | 'style'): void => {
  if (typeof window === 'undefined') return;

  const link = document.createElement('link');
  link.rel = type === 'image' ? 'preload' : 'preload';
  link.as = type;
  link.href = url;
  link.crossOrigin = 'anonymous';
  
  document.head.appendChild(link);
};

/**
 * Preload critical images
 */
export const preloadImages = (images: string[]): void => {
  images.forEach(image => preloadAsset(image, 'image'));
};

/**
 * Get cache control headers for different asset types
 */
export const getCacheControl = (type: keyof CDNConfig['cacheControl']): string => {
  return cdnConfig.cacheControl[type];
};

/**
 * Check if CDN is enabled
 */
export const isCDNEnabled = (): boolean => {
  return !!cdnConfig.baseUrl;
};

/**
 * Get CDN configuration
 */
export const getCDNConfig = (): CDNConfig => {
  return { ...cdnConfig };
};

/**
 * Optimize font loading
 */
export const optimizeFontLoading = (fontUrls: string[]): void => {
  fontUrls.forEach(fontUrl => {
    preloadAsset(fontUrl, 'font');
  });
};

/**
 * Generate critical CSS for above-the-fold content
 */
export const generateCriticalCSS = (): string => {
  // This would be generated by a build tool like Critical
  // For now, return empty string
  return '';
};

/**
 * Inline critical CSS
 */
export const inlineCriticalCSS = (): void => {
  if (typeof window === 'undefined') return;

  const criticalCSS = generateCriticalCSS();
  if (criticalCSS) {
    const style = document.createElement('style');
    style.textContent = criticalCSS;
    document.head.appendChild(style);
  }
};

export default {
  getCDNUrl,
  getOptimizedImageUrl,
  generateSrcSet,
  preloadAsset,
  preloadImages,
  getCacheControl,
  isCDNEnabled,
  getCDNConfig,
  optimizeFontLoading,
  generateCriticalCSS,
  inlineCriticalCSS
}; 