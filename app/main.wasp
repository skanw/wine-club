app OpenSaaS {
  wasp: {
    version: "^0.16.0"
  },

  title: "WineClub SaaS",

  head: [
    "<meta charset='utf-8' />",
    "<meta name='description' content='Premium wine subscription service for French wine enthusiasts.' />",
    "<meta name='author' content='WineClub Pro' />",
    "<meta name='keywords' content='wine, subscription, french wine, sommelier, wine club' />",
    
    "<meta property='og:type' content='website' />",
    "<meta property='og:title' content='WineClub Pro' />",
    "<meta property='og:site_name' content='WineClub Pro' />",
    "<meta property='og:url' content='https://wineclubpro.com' />",
    "<meta property='og:description' content='Premium wine subscription service for French wine enthusiasts.' />",
    "<meta property='og:image' content='https://wineclubpro.com/public-banner.webp' />",
    "<meta name='twitter:image' content='https://wineclubpro.com/public-banner.webp' />",
    "<meta name='twitter:image:width' content='800' />",
    "<meta name='twitter:image:height' content='400' />",
    "<meta name='twitter:card' content='summary_large_image' />",
  ],

  auth: {
    userEntity: User,
    methods: {
      email: {
        fromField: {
          name: "WineClub Pro",
          email: "noreply@wineclubpro.com"
        },
        emailVerification: {
          clientRoute: EmailVerificationRoute,
          getEmailContentFn: import { getVerificationEmailContent } from "@src/auth/email-and-pass/emails",
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
          getEmailContentFn: import { getPasswordResetEmailContent } from "@src/auth/email-and-pass/emails",
        },
        userSignupFields: import { getEmailUserFields } from "@src/auth/userSignupFields",
      },
      google: {
        userSignupFields: import { getGoogleUserFields } from "@src/auth/userSignupFields",
        configFn: import { getGoogleAuthConfig } from "@src/auth/userSignupFields",
      },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/dashboard",
  },

  db: {
    seeds: [
      import { seedMockUsers } from "@src/server/scripts/dbSeeds",
    ]
  },

  client: {
    rootComponent: import App from "@src/client/App",
  },

  emailSender: {
    provider: SMTP,
    defaultFrom: {
      name: "WineClub Pro",
      email: "noreply@wineclubpro.com"
    },
  },
}

// Core Routes
route LandingPageRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import LandingPage from "@src/client/pages/LandingPage"
}

route AboutRoute { path: "/about", to: AboutPage }
page AboutPage {
  component: import AboutPage from "@src/client/pages/AboutPage"
}

route ContactRoute { path: "/contact", to: ContactPage }
page ContactPage {
  component: import ContactPage from "@src/client/pages/ContactPage"
}

route BlogRoute { path: "/blog", to: BlogPage }
page BlogPage {
  component: import BlogPage from "@src/client/pages/BlogPage"
}

route HowItWorksRoute { path: "/how-it-works", to: HowItWorksPage }
page HowItWorksPage {
  component: import HowItWorksPage from "@src/client/pages/HowItWorksPage"
}

route PricingPageRoute { path: "/pricing", to: PricingPage }
page PricingPage {
  component: import PricingPage from "@src/client/pages/PricingPage"
}

// Auth Pages
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@src/client/pages/auth/LoginPage"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@src/client/pages/auth/SignupPage"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordResetPage } from "@src/client/pages/auth/RequestPasswordResetPage",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordResetPage } from "@src/client/pages/auth/PasswordResetPage",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerificationPage } from "@src/client/pages/auth/EmailVerificationPage",
}

// User Pages
route AccountRoute { path: "/account", to: AccountPage }
page AccountPage {
  authRequired: true,
  component: import Account from "@src/client/pages/user/AccountPage"
}

route DashboardRoute { path: "/dashboard", to: DashboardPage }
page DashboardPage {
  authRequired: true,
  component: import Dashboard from "@src/client/pages/DashboardPage"
}

// Admin Pages
route AdminRoute { path: "/admin", to: AnalyticsDashboardPage }
page AnalyticsDashboardPage {
  authRequired: true,
  component: import AnalyticsDashboardPage from "@src/admin/dashboards/analytics/AnalyticsDashboardPage"
}

route AdminUsersRoute { path: "/admin/users", to: AdminUsersPage }
page AdminUsersPage {
  authRequired: true,
  component: import AdminUsers from "@src/admin/dashboards/users/UsersDashboardPage"
}

// Core Operations
query getPaginatedUsers {
  fn: import { getPaginatedUsers } from "@src/user/operations",
  entities: [User]
}

action updateIsUserAdminById {
  fn: import { updateIsUserAdminById } from "@src/user/operations",
  entities: [User]
}

// Demo AI App (simplified)
route DemoAppRoute { path: "/demo-app", to: DemoAppPage }
page DemoAppPage {
  authRequired: true,
  component: import DemoAppPage from "@src/client/pages/demo/DemoAppPage"
}

action generateGptResponse {
  fn: import { generateGptResponse } from "@src/demo-ai-app/operations",
  entities: [User, Task, GptResponse]
}

action createTask {
  fn: import { createTask } from "@src/demo-ai-app/operations",
  entities: [Task]
}

action deleteTask {
  fn: import { deleteTask } from "@src/demo-ai-app/operations",
  entities: [Task]
}

action updateTask {
  fn: import { updateTask } from "@src/demo-ai-app/operations",
  entities: [Task]
}

query getGptResponses {
  fn: import { getGptResponses } from "@src/demo-ai-app/operations",
  entities: [User, GptResponse]
}

query getAllTasksByUser {
  fn: import { getAllTasksByUser } from "@src/demo-ai-app/operations",
  entities: [Task]
}

// Analytics
query getDailyStats {
  fn: import { getDailyStats } from "@src/analytics/operations",
  entities: [User, DailyStats]
}

job dailyStatsJob {
  executor: PgBoss,
  perform: {
    fn: import { calculateDailyStats } from "@src/analytics/stats"
  },
  schedule: {
    cron: "0 * * * *"
  },
  entities: [User, DailyStats, Logs, PageViewSource]
}

// 404 Page
route NotFoundRoute { path: "*", to: NotFoundPage }
page NotFoundPage {
  component: import { NotFoundPage } from "@src/client/components/NotFoundPage"
} 