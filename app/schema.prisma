datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  email                     String?         @unique
  username                  String?         @unique
  isAdmin                   Boolean         @default(false)

  paymentProcessorUserId    String?         @unique
  lemonSqueezyCustomerPortalUrl String?     // You can delete this if you're not using Lemon Squeezy as your payments processor.
  subscriptionStatus        String?         // 'active', 'cancel_at_period_end', 'past_due', 'deleted'
  subscriptionPlan          String?         // 'hobby', 'pro'
  datePaid                  DateTime?
  credits                   Int             @default(3)

  gptResponses              GptResponse[]
  contactFormMessages       ContactFormMessage[]
  tasks                     Task[]
  files                     File[]
  
  // Wine Club relations
  ownedWineCaves            WineCave[]
  wineSubscriptions         WineSubscription[]
  loyaltyPoints             Int             @default(0)
  
  // Loyalty and referral relations
  loyaltyPointsHistory      LoyaltyPoints[] @relation("MemberLoyaltyPoints")
  referralsSent             Referral[]      @relation("ReferrerReferrals")
  referralsReceived         Referral[]      @relation("RefereeReferrals")
  preferences               MemberPreferences? @relation("MemberPreferences")
  wineRatings               WineRating[]    @relation("MemberWineRatings")
  
  // French compliance relations
  consentRecords            ConsentRecord[]
  wineProfile               WineProfile?
  
  // Notification and GDPR relations
  notifications             Notification[]
  dataSubjectRequests       DataSubjectRequest[]
}

model GptResponse {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
}

model Task {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  description               String
  time                      String          @default("1")
  isDone                    Boolean         @default(false)
}

model File {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  name                      String
  type                      String
  key                       String
  uploadUrl                 String
}

model DailyStats {
  id                               Int             @id @default(autoincrement())
  date                             DateTime        @default(now()) @unique

  totalViews                       Int             @default(0)
  prevDayViewsChangePercent        String          @default("0")
  userCount                        Int             @default(0)
  paidUserCount                    Int             @default(0)
  userDelta                        Int             @default(0)
  paidUserDelta                    Int             @default(0)
  totalRevenue                     Float           @default(0)
  totalProfit                      Float           @default(0)

  sources                          PageViewSource[]
}

model PageViewSource {
  @@id([date, name])
  name                     String
  date                     DateTime        @default(now())

  dailyStats               DailyStats?     @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId             Int?

  visitors                 Int
}

model Logs {
  id                       Int             @id @default(autoincrement())
  createdAt                DateTime        @default(now())

  message                  String
  level                    String
}

model ContactFormMessage {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
  isRead                    Boolean         @default(false)
  repliedAt                 DateTime?
}

// Wine Club specific models
model WineCave {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  name                      String
  description               String?
  location                  String?
  website                   String?
  contactEmail              String
  logoUrl                   String?
  
  owner                     User            @relation(fields: [ownerId], references: [id])
  ownerId                   String

  subscriptionTiers         SubscriptionTier[]
  wines                     Wine[]
  subscriptions             WineSubscription[]
  shipments                 Shipment[]
  loyaltyPoints             LoyaltyPoints[]
}

model SubscriptionTier {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  name                      String          // "Basic", "Premium", "VIP"
  description               String?
  price                     Float           // Monthly price
  bottlesPerMonth           Int             @default(2)
  isActive                  Boolean         @default(true)

  wineCave                  WineCave        @relation(fields: [wineCaveId], references: [id])
  wineCaveId                String

  subscriptions             WineSubscription[]
}

model Wine {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  name                      String
  varietal                  String          // "Pinot Noir", "Chardonnay", etc.
  vintage                   Int
  description               String?
  tastingNotes              String?
  alcoholContent            Float?
  price                     Float
  stockQuantity             Int             @default(0)
  imageUrl                  String?

  wineCave                  WineCave        @relation(fields: [wineCaveId], references: [id])
  wineCaveId                String

  shipmentItems             ShipmentItem[]
  ratings                   WineRating[]    @relation("WineRatings")
  recommendations           WineRecommendation[]
}

model WineSubscription {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  status                    String          @default("active") // "active", "paused", "cancelled"
  startDate                 DateTime        @default(now())
  nextShipmentDate          DateTime?
  
  member                    User            @relation(fields: [memberId], references: [id])
  memberId                  String

  wineCave                  WineCave        @relation(fields: [wineCaveId], references: [id])
  wineCaveId                String

  subscriptionTier          SubscriptionTier @relation(fields: [subscriptionTierId], references: [id])
  subscriptionTierId        String

  shipments                 Shipment[]
  loyaltyPointsHistory      LoyaltyPoints[]
  
  // Delivery preferences
  deliveryAddress           String?
  deliveryInstructions      String?
  phoneNumber               String?
}

model Shipment {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  shipmentDate              DateTime        @default(now())
  trackingNumber            String?
  carrier                   String?         // "FedEx", "UPS", etc.
  status                    String          @default("pending") // "pending", "shipped", "delivered"
  
  subscription              WineSubscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId            String

  wineCave                  WineCave        @relation(fields: [wineCaveId], references: [id])
  wineCaveId                String

  items                     ShipmentItem[]
}

model ShipmentItem {
  id                        String          @id @default(uuid())
  
  shipment                  Shipment        @relation(fields: [shipmentId], references: [id])
  shipmentId                String

  wine                      Wine            @relation(fields: [wineId], references: [id])
  wineId                    String

  quantity                  Int             @default(1)
}

// French Loyalty Models
model LoyaltyPoints {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  userId                    String
  points                    Int             @default(0)
  totalEarned               Int             @default(0)
  totalRedeemed             Int             @default(0)
  totalExpired              Int             @default(0)
  tier                      String          @default("BRONZE") // BRONZE, SILVER, GOLD, PLATINUM
  expiresAt                 DateTime?
  lastUpdated               DateTime        @updatedAt
  
  complianceData            Json?           // GDPR compliance data
  
  // Relations
  member                    User?           @relation("MemberLoyaltyPoints", fields: [memberId], references: [id])
  memberId                  String?

  subscription              WineSubscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId            String?

  wineCave                  WineCave?       @relation(fields: [wineCaveId], references: [id])
  wineCaveId                String?

  transactions              LoyaltyTransaction[]
}

model LoyaltyTransaction {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  userId                    String
  points                    Int
  type                      String          // 'EARNED', 'REDEEMED', 'EXPIRED'
  reason                    String
  orderId                   String?
  
  complianceData            Json?           // GDPR compliance data
  
  // Relations
  loyaltyPoints             LoyaltyPoints?  @relation(fields: [loyaltyPointsId], references: [id])
  loyaltyPointsId           String?
}

model Referral {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  referrerId                String
  referredEmail             String
  referredName              String
  source                    String          // 'email', 'social', 'direct'
  status                    String          @default("PENDING") // 'PENDING', 'COMPLETED', 'EXPIRED'
  referralCode              String          @unique
  
  complianceData            Json?           // GDPR compliance data
  
  // Relations
  referrer                  User?           @relation("ReferrerReferrals", fields: [referrerId], references: [id])
  referee                   User?           @relation("RefereeReferrals", fields: [refereeId], references: [id])
  refereeId                 String?
}

model ReferralReward {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  userId                    String
  rewardType                String          // 'discount', 'free_shipping', 'free_bottle', 'vip_event'
  pointsUsed                Int
  value                     Float
  status                    String          @default("ACTIVE") // 'ACTIVE', 'USED', 'EXPIRED'
  expiresAt                 DateTime?
  
  complianceData            Json?           // Legal compliance data
}

// Member preferences for personalized recommendations
model MemberPreferences {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  varietals                 String[]        // Preferred wine varietals
  priceRangeMin             Float?
  priceRangeMax             Float?
  bodyPreference            String?         // "light", "medium", "full"
  tasteProfile              String[]        // Taste preferences

  member                    User            @relation("MemberPreferences", fields: [memberId], references: [id])
  memberId                  String          @unique
}

// Wine ratings and reviews
model WineRating {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  rating                    Int             // 1-5 stars
  review                    String?
  isPublic                  Boolean         @default(true)

  member                    User            @relation("MemberWineRatings", fields: [memberId], references: [id])
  memberId                  String

  wine                      Wine            @relation("WineRatings", fields: [wineId], references: [id])
  wineId                    String

  @@unique([memberId, wineId])
}

// French Compliance Models
model ConsentRecord {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  userId                    String
  consentType               String          // 'analytics', 'marketing', 'necessary', 'preferences'
  granted                   Boolean
  timestamp                 DateTime        @default(now())
  ipAddress                 String?
  userAgent                 String?
  consentVersion            String
  source                    String          // 'banner', 'settings', 'registration'
  
  complianceData            Json?           // GDPR compliance data
}

// French Shipping Models
model ShippingRate {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  carrier                   String          // 'Colissimo', 'Chronopost', 'DPD', 'GLS'
  service                   String          // 'standard', 'express', 'premium'
  price                     Float
  deliveryTime              String
  features                  String[]
  logo                      String?
  
  origin                    Json            // French address
  destination               Json            // French address
  packages                  Json            // Package details
  
  complianceData            Json?           // TVA and legal compliance
}

model TrackingInfo {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  trackingNumber            String          @unique
  carrier                   String          // "DHL", "FedEx", "UPS"
  status                    String          @default("pending") // "pending", "in_transit", "delivered", "failed"
  events                    Json            @default("[]") // Array of tracking events
  estimatedDelivery         DateTime?
  complianceData            Json            @default("{}") // Alcohol shipping compliance data

  shipment                  Shipment?       @relation(fields: [shipmentId], references: [id])
  shipmentId                String?         @unique
}

model ShippingInfo {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  subscriptionId            String
  trackingNumber            String          @unique
  carrier                   String          // "DHL_EXPRESS", "FedEx", "UPS"
  status                    String          @default("PENDING") // "PENDING", "IN_TRANSIT", "OUT_FOR_DELIVERY", "DELIVERED"
  events                    Json            @default("[]") // Array of tracking events
  estimatedDelivery         DateTime?
  complianceData            Json            @default("{}") // Alcohol shipping compliance data
  stripeSubscriptionId      String?         // Link to Stripe subscription

  subscription              WineSubscription @relation(fields: [subscriptionId], references: [id])
}

// French AI Sommelier Models
model WineRecommendation {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  wineId                    String
  name                      String
  region                    String
  grapeVarieties            String[]
  vintage                   Int?
  price                     Float
  rating                    Float?
  description               String?
  sommelierNotes            String?
  pairingSuggestions        String[]
  confidence                Float
  
  // Relations
  wine                      Wine?           @relation(fields: [wineId], references: [id])
}

model WinePairing {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  dish                      String
  cuisine                   String
  recommendedWines          Json            // Array of wine recommendations
  sommelierNotes            String?
  alternativePairings       String[]
  servingTemperature        String?
  decanting                 String?
  
  complianceData            Json?           // Legal compliance data
}

model WineProfile {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  userId                    String
  preferences               Json            // User wine preferences
  ratings                   Json            // Array of wine ratings
  recommendations           Json            // AI-generated recommendations
  lastUpdated               DateTime        @updatedAt
  
  complianceData            Json?           // GDPR compliance data
}

// Notification System
model Notification {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  userId                    String
  type                      String          // 'subscription', 'shipping', 'wine', 'loyalty', 'system'
  title                     String
  message                   String
  data                      Json?           // Additional notification data
  isRead                    Boolean         @default(false)
  expiresAt                 DateTime?
  
  // Relations
  user                      User            @relation(fields: [userId], references: [id])
}

// GDPR Data Subject Requests
model DataSubjectRequest {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  userId                    String
  requestType               String          // 'access', 'rectification', 'erasure', 'portability', 'restriction'
  description               String
  status                    String          @default("pending") // 'pending', 'processing', 'completed', 'rejected'
  notes                     String?
  completedAt               DateTime?
  
  // Relations
  user                      User            @relation(fields: [userId], references: [id])
}
