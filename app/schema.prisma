datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  email                     String?         @unique
  username                  String?         @unique
  isAdmin                   Boolean         @default(false)

  paymentProcessorUserId    String?         @unique
  lemonSqueezyCustomerPortalUrl String?     // You can delete this if you're not using Lemon Squeezy as your payments processor.
  subscriptionStatus        String?         // 'active', 'cancel_at_period_end', 'past_due', 'deleted'
  subscriptionPlan          String?         // 'hobby', 'pro'
  datePaid                  DateTime?
  credits                   Int             @default(3)

  gptResponses              GptResponse[]
  contactFormMessages       ContactFormMessage[]
  tasks                     Task[]
  files                     File[]
  
  // Wine Club relations
  ownedWineCaves            WineCave[]
  wineSubscriptions         WineSubscription[]
}

model GptResponse {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
}

model Task {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  description               String
  time                      String          @default("1")
  isDone                    Boolean         @default(false)
}

model File {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  name                      String
  type                      String
  key                       String
  uploadUrl                 String
}

model DailyStats {
  id                               Int             @id @default(autoincrement())
  date                             DateTime        @default(now()) @unique

  totalViews                       Int             @default(0)
  prevDayViewsChangePercent        String          @default("0")
  userCount                        Int             @default(0)
  paidUserCount                    Int             @default(0)
  userDelta                        Int             @default(0)
  paidUserDelta                    Int             @default(0)
  totalRevenue                     Float           @default(0)
  totalProfit                      Float           @default(0)

  sources                          PageViewSource[]
}

model PageViewSource {
  @@id([date, name])
  name                     String
  date                     DateTime        @default(now())

  dailyStats               DailyStats?     @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId             Int?

  visitors                 Int
}

model Logs {
  id                       Int             @id @default(autoincrement())
  createdAt                DateTime        @default(now())

  message                  String
  level                    String
}

model ContactFormMessage {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
  isRead                    Boolean         @default(false)
  repliedAt                 DateTime?
}

// Wine Club specific models
model WineCave {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  name                      String
  description               String?
  location                  String?
  website                   String?
  contactEmail              String
  logoUrl                   String?
  
  owner                     User            @relation(fields: [ownerId], references: [id])
  ownerId                   String

  subscriptionTiers         SubscriptionTier[]
  wines                     Wine[]
  subscriptions             WineSubscription[]
  shipments                 Shipment[]
}

model SubscriptionTier {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  name                      String          // "Basic", "Premium", "VIP"
  description               String?
  price                     Float           // Monthly price
  bottlesPerMonth           Int             @default(2)
  isActive                  Boolean         @default(true)

  wineCave                  WineCave        @relation(fields: [wineCaveId], references: [id])
  wineCaveId                String

  subscriptions             WineSubscription[]
}

model Wine {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  name                      String
  varietal                  String          // "Pinot Noir", "Chardonnay", etc.
  vintage                   Int
  description               String?
  tastingNotes              String?
  alcoholContent            Float?
  price                     Float
  stockQuantity             Int             @default(0)
  imageUrl                  String?

  wineCave                  WineCave        @relation(fields: [wineCaveId], references: [id])
  wineCaveId                String

  shipmentItems             ShipmentItem[]
}

model WineSubscription {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  status                    String          @default("active") // "active", "paused", "cancelled"
  startDate                 DateTime        @default(now())
  nextShipmentDate          DateTime?
  
  member                    User            @relation(fields: [memberId], references: [id])
  memberId                  String

  wineCave                  WineCave        @relation(fields: [wineCaveId], references: [id])
  wineCaveId                String

  subscriptionTier          SubscriptionTier @relation(fields: [subscriptionTierId], references: [id])
  subscriptionTierId        String

  shipments                 Shipment[]
  
  // Delivery preferences
  deliveryAddress           String?
  deliveryInstructions      String?
  phoneNumber               String?
}

model Shipment {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  shipmentDate              DateTime        @default(now())
  trackingNumber            String?
  carrier                   String?         // "FedEx", "UPS", etc.
  status                    String          @default("pending") // "pending", "shipped", "delivered"
  
  subscription              WineSubscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId            String

  wineCave                  WineCave        @relation(fields: [wineCaveId], references: [id])
  wineCaveId                String

  items                     ShipmentItem[]
}

model ShipmentItem {
  id                        String          @id @default(uuid())
  
  shipment                  Shipment        @relation(fields: [shipmentId], references: [id])
  shipmentId                String

  wine                      Wine            @relation(fields: [wineId], references: [id])
  wineId                    String

  quantity                  Int             @default(1)
}
